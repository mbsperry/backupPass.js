{"name":"Backuppass.js","tagline":"A simple personal KeePass backup web server built with node.js","body":"backupPass\r\n==========\r\n\r\nA simple personal KeePass backup web server built with node.js and\r\n[keepass.io](https://github.com/NeoXiD/keepass.io)\r\n\r\n[![Build Status](https://travis-ci.org/mbsperry/backupPass.js.svg?branch=master)](https://travis-ci.org/mbsperry/backupPass.js)\r\n\r\n## About\r\n\r\nbackupPass aims to supply a little peace of mind to those of use\r\nwho use KeePass. Syncing to a phone works well to have access to\r\npasswords when away from the home computer, but what happens when\r\nthe phone battery dies or the phone gets lost?\r\n\r\nBackup.Pass attempts to address this issue by providing a small,\r\npersonal web server which can access the KeePass database. This is\r\nmeant to be a secure, *emergency* backup server with *limited* access\r\nto your passwords.\r\n\r\n## Security\r\n\r\nbackupPass is not meant to be used on a regular basis. The features\r\nbelow are designed to minimize exposure if either your server is\r\ncompromised or your backup keys fall into the wrong hands:\r\n\r\n- Five one-time use encryption keys are generated on setup.\r\n- Each key is used to encrypt a separate copy of the KeePass\r\nencryption key file. \r\n- Every time a key is used, it is deleted.\r\n- Once the KeePass database key file is decrypted, the user still must\r\nsupply the KeePass password to unlock the database.\r\n- After 3 incorrect attempts: \r\n   - The server shuts down.\r\n   - All remaining keyfiles are deleted.\r\n- Unencrypted Keepass database keys are not stored on the server.\r\n- The Keepass password is never stored in any form.\r\n- The server only allows access to one account per key.\r\n\r\n## Dependencies\r\n\r\n- [KeePass.io](https://github.com/NeoXiD/keepass.io)\r\n- ExpressJS\r\n- body-parser\r\n- node-tmp\r\n- cookierParser\r\n- express-session\r\n- helmet\r\n- csurf\r\n\r\nThe front end is built on jquery, with the source included in the\r\ndistribution. Nothing is loaded over CDN's.\r\n\r\nDevelopment dependencies:\r\n\r\n- mocha\r\n- should\r\n- supertest\r\n\r\n## Install\r\n\r\n```bash\r\n$> git clone https://github.com/mbsperry/backupPass.js.git\r\n$> cd backupPass.js\r\n$> mkdir do_not_include\r\n```\r\n\r\n## Setup\r\n\r\n- Copy keepass database to `./keepass.kdbx`\r\n- Copy keepass database key file to `./do_not_include/key.key`\r\n- Build backup.pass keys:\r\n\r\n```bash\r\n$> node setup.js production\r\n```\r\n\r\n- **Print and keep the one-time keys with you.** They won't do you any good unless you have them when you need them!\r\n\r\n## Run\r\n\r\n\r\n```bash\r\n$> node app.js\r\n```\r\n\r\n- Requires running behind https capable proxy.\r\n- Or deploy to your favorite PaaS.\r\n\r\n## Options\r\n\r\nStored as env variables. If running locally, can be stored in\r\n`config.json`. See `lib/config.js` for details.\r\n\r\n- `NODE_ENV = 'production'`\r\n    - Stores encrypted keyfiles in `./keys/`\r\n    - Expects to run behind a proxy. \r\n- `NODE_ENV = 'test'`\r\n    - Stores encrypted keyfiles in `./testing/`\r\n    - Starts self-signed https server\r\n    - loads keepass database from `./keepass/testing.kdbx`\r\n- `REDIRECT`\r\n    - `default = false`: Redirects http requests to https. Default is to ignore all http requests.\r\n- `KEEPASS_PATH`\r\n    - Specifies alternate path for keepass database\r\n- `LOG_LEVEL`\r\n    - `Default: quiet`: Minimal logging to the console. Logins and error messages get logged to `log.txt`.\r\n    - `\"verbose\"`\r\n\r\n## Compatibility\r\n\r\n- Tested extensively in Chrome\r\n- use `/legacy` route for a rather clunky version that works well in older browsers\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}